CCS PCM C Compiler, Version 5.074, 32906               03-เม.ย.-20 00:49

               Filename:   D:\Ronnachai\CPE Couse\261214 Microprocessor and Interfacing\game\2048\main.lst

               ROM used:   1986 words (24%)
                           Largest free fragment is 2048
               RAM used:   75 (20%) at main() level
                           87 (24%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   398
0003:  NOP
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
0004:  DATA 89,04
0005:  DATA 3C,10
0006:  DATA D7,32
0007:  DATA EC,31
0008:  DATA EF,36
0009:  DATA 65,10
000A:  DATA F4,37
000B:  DATA 20,19
000C:  DATA 30,1A
000D:  DATA 38,10
000E:  DATA E7,30
000F:  DATA ED,32
0010:  DATA 20,1F
0011:  DATA 0D,05
0012:  DATA 00,00
0013:  DATA A7,30
0014:  DATA 27,10
0015:  DATA 3D,10
0016:  DATA CC,32
0017:  DATA 66,3A
0018:  DATA 20,10
0019:  DATA 27,32
001A:  DATA 27,10
001B:  DATA 3D,10
001C:  DATA D2,34
001D:  DATA 67,34
001E:  DATA 74,10
001F:  DATA A0,13
0020:  DATA F7,13
0021:  DATA A0,1E
0022:  DATA A0,2A
0023:  DATA 70,10
0024:  DATA A0,13
0025:  DATA F3,13
0026:  DATA A0,1E
0027:  DATA 20,22
0028:  DATA EF,3B
0029:  DATA EE,06
002A:  DATA 0A,05
002B:  DATA 00,01
002C:  DATA 8C,2C
002D:  DATA EF,3A
002E:  DATA 72,10
002F:  DATA F3,31
0030:  DATA 6F,39
0031:  DATA 65,05
0032:  DATA A5,3A
0033:  DATA 00,00
0034:  DATA 89,04
0035:  DATA 89,10
0036:  DATA C7,30
0037:  DATA ED,32
0038:  DATA A0,27
0039:  DATA F6,32
003A:  DATA F2,10
003B:  DATA 0D,05
003C:  DATA 80,00
003D:  DATA 89,04
003E:  DATA 61,32
003F:  DATA 64,10
0040:  DATA EE,32
0041:  DATA 77,10
0042:  DATA 5B,19
0043:  DATA 5D,10
0044:  DATA 69,37
0045:  DATA 20,14
0046:  DATA 25,32
0047:  DATA AC,12
0048:  DATA E4,14
0049:  DATA 0D,05
004A:  DATA 00,00
004B:  DATA 89,04
004C:  DATA 89,16
004D:  DATA AD,16
004E:  DATA 2D,26
004F:  DATA 65,33
0050:  DATA F4,16
0051:  DATA AD,16
0052:  DATA AD,06
0053:  DATA 0A,00
0054:  DATA 89,04
0055:  DATA 89,16
0056:  DATA AD,16
0057:  DATA D2,34
0058:  DATA 67,34
0059:  DATA F4,16
005A:  DATA AD,16
005B:  DATA 0D,05
005C:  DATA 00,01
005D:  DATA 89,04
005E:  DATA 89,16
005F:  DATA AD,16
0060:  DATA 2D,2A
0061:  DATA 6F,38
0062:  DATA AD,16
0063:  DATA AD,16
0064:  DATA 0D,05
0065:  DATA 00,01
0066:  DATA 89,04
0067:  DATA 89,16
0068:  DATA AD,16
0069:  DATA C2,37
006A:  DATA 74,3A
006B:  DATA EF,36
006C:  DATA AD,16
006D:  DATA AD,06
006E:  DATA 0A,00
*
0182:  MOVF   0B,W
0183:  MOVWF  63
0184:  BCF    0B.7
0185:  BSF    03.5
0186:  BSF    03.6
0187:  BSF    0C.7
0188:  BSF    0C.0
0189:  NOP
018A:  NOP
018B:  BCF    03.5
018C:  BCF    03.6
018D:  BTFSC  63.7
018E:  BSF    0B.7
018F:  BSF    03.6
0190:  MOVF   0C,W
0191:  ANDLW  7F
0192:  BTFSC  03.2
0193:  GOTO   1D8
0194:  BCF    03.6
0195:  MOVWF  63
0196:  BSF    03.6
0197:  MOVF   0D,W
0198:  BCF    03.6
0199:  MOVWF  64
019A:  BSF    03.6
019B:  MOVF   0F,W
019C:  BCF    03.6
019D:  MOVWF  65
019E:  MOVF   63,W
019F:  BTFSS  0C.4
01A0:  GOTO   19F
01A1:  MOVWF  19
01A2:  MOVF   64,W
01A3:  BSF    03.6
01A4:  MOVWF  0D
01A5:  BCF    03.6
01A6:  MOVF   65,W
01A7:  BSF    03.6
01A8:  MOVWF  0F
01A9:  BCF    03.6
01AA:  MOVF   0B,W
01AB:  MOVWF  66
01AC:  BCF    0B.7
01AD:  BSF    03.5
01AE:  BSF    03.6
01AF:  BSF    0C.7
01B0:  BSF    0C.0
01B1:  NOP
01B2:  NOP
01B3:  BCF    03.5
01B4:  BCF    03.6
01B5:  BTFSC  66.7
01B6:  BSF    0B.7
01B7:  BSF    03.6
01B8:  RLF    0C,W
01B9:  RLF    0E,W
01BA:  ANDLW  7F
01BB:  BTFSC  03.2
01BC:  GOTO   1D8
01BD:  BCF    03.6
01BE:  MOVWF  63
01BF:  BSF    03.6
01C0:  MOVF   0D,W
01C1:  BCF    03.6
01C2:  MOVWF  64
01C3:  BSF    03.6
01C4:  MOVF   0F,W
01C5:  BCF    03.6
01C6:  MOVWF  65
01C7:  MOVF   63,W
01C8:  BTFSS  0C.4
01C9:  GOTO   1C8
01CA:  MOVWF  19
01CB:  MOVF   64,W
01CC:  BSF    03.6
01CD:  MOVWF  0D
01CE:  BCF    03.6
01CF:  MOVF   65,W
01D0:  BSF    03.6
01D1:  MOVWF  0F
01D2:  INCF   0D,F
01D3:  BTFSC  03.2
01D4:  INCF   0F,F
01D5:  BCF    03.6
01D6:  GOTO   182
01D7:  BSF    03.6
01D8:  BCF    03.6
01D9:  RETURN
*
0218:  MOVF   0B,W
0219:  MOVWF  64
021A:  BCF    0B.7
021B:  BSF    03.5
021C:  BSF    03.6
021D:  BSF    0C.7
021E:  BSF    0C.0
021F:  NOP
0220:  NOP
0221:  BCF    03.5
0222:  BCF    03.6
0223:  BTFSC  64.7
0224:  BSF    0B.7
0225:  BTFSC  03.0
0226:  GOTO   24F
0227:  BSF    03.6
0228:  MOVF   0C,W
0229:  ANDLW  7F
022A:  BCF    03.6
022B:  MOVWF  64
022C:  BSF    03.6
022D:  MOVF   0D,W
022E:  BCF    03.6
022F:  MOVWF  65
0230:  BSF    03.6
0231:  MOVF   0F,W
0232:  BCF    03.6
0233:  MOVWF  66
0234:  MOVF   64,W
0235:  MOVWF  67
0236:  CALL   1EC
0237:  MOVF   65,W
0238:  BSF    03.6
0239:  MOVWF  0D
023A:  BCF    03.6
023B:  MOVF   66,W
023C:  BSF    03.6
023D:  MOVWF  0F
023E:  BCF    03.6
023F:  MOVF   0B,W
0240:  MOVWF  67
0241:  BCF    0B.7
0242:  BSF    03.5
0243:  BSF    03.6
0244:  BSF    0C.7
0245:  BSF    0C.0
0246:  NOP
0247:  NOP
0248:  BCF    03.5
0249:  BCF    03.6
024A:  BTFSC  67.7
024B:  BSF    0B.7
024C:  DECFSZ 63,F
024D:  GOTO   24F
024E:  GOTO   26E
024F:  BSF    03.6
0250:  RLF    0C,W
0251:  RLF    0E,W
0252:  ANDLW  7F
0253:  BCF    03.6
0254:  MOVWF  64
0255:  BSF    03.6
0256:  MOVF   0D,W
0257:  BCF    03.6
0258:  MOVWF  65
0259:  BSF    03.6
025A:  MOVF   0F,W
025B:  BCF    03.6
025C:  MOVWF  66
025D:  MOVF   64,W
025E:  MOVWF  67
025F:  CALL   1EC
0260:  MOVF   65,W
0261:  BSF    03.6
0262:  MOVWF  0D
0263:  BCF    03.6
0264:  MOVF   66,W
0265:  BSF    03.6
0266:  MOVWF  0F
0267:  INCF   0D,F
0268:  BTFSC  03.2
0269:  INCF   0F,F
026A:  BCF    03.0
026B:  BCF    03.6
026C:  DECFSZ 63,F
026D:  GOTO   218
026E:  BCF    0A.3
026F:  BCF    0A.4
0270:  GOTO   412 (RETURN)
0271:  MOVF   6C,W
0272:  CLRF   78
0273:  SUBWF  6B,W
0274:  BTFSC  03.0
0275:  GOTO   279
0276:  MOVF   6B,W
0277:  MOVWF  77
0278:  GOTO   285
0279:  CLRF   77
027A:  MOVLW  08
027B:  MOVWF  6D
027C:  RLF    6B,F
027D:  RLF    77,F
027E:  MOVF   6C,W
027F:  SUBWF  77,W
0280:  BTFSC  03.0
0281:  MOVWF  77
0282:  RLF    78,F
0283:  DECFSZ 6D,F
0284:  GOTO   27C
0285:  RETURN
0286:  MOVF   78,W
0287:  MOVF   63,W
0288:  MOVWF  6B
0289:  MOVLW  64
028A:  MOVWF  6C
028B:  CALL   271
028C:  MOVF   77,W
028D:  MOVWF  63
028E:  MOVF   78,W
028F:  MOVLW  30
0290:  BTFSS  03.2
0291:  GOTO   299
0292:  BTFSS  64.1
0293:  GOTO   2A0
0294:  BTFSC  64.3
0295:  GOTO   2A0
0296:  BTFSC  64.4
0297:  MOVLW  20
0298:  GOTO   29C
0299:  BCF    64.3
029A:  BCF    64.4
029B:  BSF    64.0
029C:  ADDWF  78,F
029D:  MOVF   78,W
029E:  MOVWF  67
029F:  CALL   1EC
02A0:  MOVF   63,W
02A1:  MOVWF  6B
02A2:  MOVLW  0A
02A3:  MOVWF  6C
02A4:  CALL   271
02A5:  MOVF   77,W
02A6:  MOVWF  63
02A7:  MOVF   78,W
02A8:  MOVLW  30
02A9:  BTFSS  03.2
02AA:  GOTO   2B1
02AB:  BTFSC  64.3
02AC:  GOTO   2B5
02AD:  BTFSS  64.0
02AE:  GOTO   2B5
02AF:  BTFSC  64.4
02B0:  MOVLW  20
02B1:  ADDWF  78,F
02B2:  MOVF   78,W
02B3:  MOVWF  67
02B4:  CALL   1EC
02B5:  MOVLW  30
02B6:  ADDWF  63,F
02B7:  MOVF   63,W
02B8:  MOVWF  67
02B9:  CALL   1EC
02BA:  BCF    0A.3
02BB:  BCF    0A.4
02BC:  GOTO   417 (RETURN)
02BD:  CLRF   77
02BE:  CLRF   78
02BF:  MOVF   65,W
02C0:  BCF    03.0
02C1:  BTFSC  66.0
02C2:  ADDWF  77,F
02C3:  RRF    77,F
02C4:  RRF    78,F
02C5:  BTFSC  66.1
02C6:  ADDWF  77,F
02C7:  RRF    77,F
02C8:  RRF    78,F
02C9:  BTFSC  66.2
02CA:  ADDWF  77,F
02CB:  RRF    77,F
02CC:  RRF    78,F
02CD:  BTFSC  66.3
02CE:  ADDWF  77,F
02CF:  RRF    77,F
02D0:  RRF    78,F
02D1:  BTFSC  66.4
02D2:  ADDWF  77,F
02D3:  RRF    77,F
02D4:  RRF    78,F
02D5:  BTFSC  66.5
02D6:  ADDWF  77,F
02D7:  RRF    77,F
02D8:  RRF    78,F
02D9:  BTFSC  66.6
02DA:  ADDWF  77,F
02DB:  RRF    77,F
02DC:  RRF    78,F
02DD:  BTFSC  66.7
02DE:  ADDWF  77,F
02DF:  RRF    77,F
02E0:  RRF    78,F
02E1:  RETURN
02E2:  MOVLW  20
02E3:  BTFSS  66.4
02E4:  MOVLW  30
02E5:  MOVWF  67
02E6:  MOVF   65,W
02E7:  MOVWF  77
02E8:  BTFSS  65.7
02E9:  GOTO   2F2
02EA:  COMF   77,F
02EB:  INCF   77,F
02EC:  MOVF   77,W
02ED:  MOVWF  65
02EE:  MOVLW  2D
02EF:  MOVWF  67
02F0:  BSF    66.7
02F1:  BSF    66.0
02F2:  MOVF   65,W
02F3:  MOVWF  6B
02F4:  MOVLW  64
02F5:  MOVWF  6C
02F6:  CALL   271
02F7:  MOVF   77,W
02F8:  MOVWF  65
02F9:  MOVLW  30
02FA:  ADDWF  78,W
02FB:  MOVWF  68
02FC:  MOVF   65,W
02FD:  MOVWF  6B
02FE:  MOVLW  0A
02FF:  MOVWF  6C
0300:  CALL   271
0301:  MOVLW  30
0302:  ADDWF  77,W
0303:  MOVWF  6A
0304:  MOVLW  30
0305:  ADDWF  78,W
0306:  MOVWF  69
0307:  MOVF   67,W
0308:  MOVWF  77
0309:  MOVLW  30
030A:  SUBWF  68,W
030B:  BTFSC  03.2
030C:  GOTO   311
030D:  BSF    66.1
030E:  BTFSC  66.7
030F:  BSF    66.2
0310:  GOTO   325
0311:  MOVF   67,W
0312:  MOVWF  68
0313:  MOVLW  20
0314:  MOVWF  67
0315:  MOVLW  30
0316:  SUBWF  69,W
0317:  BTFSC  03.2
0318:  GOTO   31D
0319:  BSF    66.0
031A:  BTFSC  66.7
031B:  BSF    66.1
031C:  GOTO   325
031D:  BTFSS  03.2
031E:  BSF    66.0
031F:  BTFSS  03.2
0320:  GOTO   325
0321:  MOVF   68,W
0322:  MOVWF  69
0323:  MOVLW  20
0324:  MOVWF  68
0325:  BTFSC  66.2
0326:  GOTO   32C
0327:  BTFSC  66.1
0328:  GOTO   330
0329:  BTFSC  66.0
032A:  GOTO   334
032B:  GOTO   338
032C:  MOVF   67,W
032D:  BTFSS  0C.4
032E:  GOTO   32D
032F:  MOVWF  19
0330:  MOVF   68,W
0331:  BTFSS  0C.4
0332:  GOTO   331
0333:  MOVWF  19
0334:  MOVF   69,W
0335:  BTFSS  0C.4
0336:  GOTO   335
0337:  MOVWF  19
0338:  MOVF   6A,W
0339:  BTFSS  0C.4
033A:  GOTO   339
033B:  MOVWF  19
033C:  RETURN
033D:  MOVF   0B,W
033E:  MOVWF  66
033F:  BCF    0B.7
0340:  BSF    03.5
0341:  BSF    03.6
0342:  BSF    0C.7
0343:  BSF    0C.0
0344:  NOP
0345:  NOP
0346:  BCF    03.5
0347:  BCF    03.6
0348:  BTFSC  66.7
0349:  BSF    0B.7
034A:  BTFSC  03.0
034B:  GOTO   375
034C:  BSF    03.6
034D:  MOVF   0C,W
034E:  ANDLW  7F
034F:  BCF    03.6
0350:  MOVWF  66
0351:  BSF    03.6
0352:  MOVF   0D,W
0353:  BCF    03.6
0354:  MOVWF  67
0355:  BSF    03.6
0356:  MOVF   0F,W
0357:  BCF    03.6
0358:  MOVWF  68
0359:  MOVF   66,W
035A:  BTFSS  0C.4
035B:  GOTO   35A
035C:  MOVWF  19
035D:  MOVF   67,W
035E:  BSF    03.6
035F:  MOVWF  0D
0360:  BCF    03.6
0361:  MOVF   68,W
0362:  BSF    03.6
0363:  MOVWF  0F
0364:  BCF    03.6
0365:  MOVF   0B,W
0366:  MOVWF  69
0367:  BCF    0B.7
0368:  BSF    03.5
0369:  BSF    03.6
036A:  BSF    0C.7
036B:  BSF    0C.0
036C:  NOP
036D:  NOP
036E:  BCF    03.5
036F:  BCF    03.6
0370:  BTFSC  69.7
0371:  BSF    0B.7
0372:  DECFSZ 65,F
0373:  GOTO   375
0374:  GOTO   395
0375:  BSF    03.6
0376:  RLF    0C,W
0377:  RLF    0E,W
0378:  ANDLW  7F
0379:  BCF    03.6
037A:  MOVWF  66
037B:  BSF    03.6
037C:  MOVF   0D,W
037D:  BCF    03.6
037E:  MOVWF  67
037F:  BSF    03.6
0380:  MOVF   0F,W
0381:  BCF    03.6
0382:  MOVWF  68
0383:  MOVF   66,W
0384:  BTFSS  0C.4
0385:  GOTO   384
0386:  MOVWF  19
0387:  MOVF   67,W
0388:  BSF    03.6
0389:  MOVWF  0D
038A:  BCF    03.6
038B:  MOVF   68,W
038C:  BSF    03.6
038D:  MOVWF  0F
038E:  INCF   0D,F
038F:  BTFSC  03.2
0390:  INCF   0F,F
0391:  BCF    03.0
0392:  BCF    03.6
0393:  DECFSZ 65,F
0394:  GOTO   33D
0395:  BCF    0A.3
0396:  BCF    0A.4
0397:  GOTO   5C1 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 *=16   
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOMCLR                   //Master Clear pin not enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES BROWNOUT                 //Brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES BORV40                   //Brownout reset at 4.0V 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
*
006F:  MOVLW  68
0070:  MOVWF  04
0071:  BCF    03.7
0072:  MOVF   00,W
0073:  BTFSC  03.2
0074:  GOTO   082
0075:  MOVLW  02
0076:  MOVWF  78
0077:  CLRF   77
0078:  DECFSZ 77,F
0079:  GOTO   078
007A:  DECFSZ 78,F
007B:  GOTO   077
007C:  MOVLW  97
007D:  MOVWF  77
007E:  DECFSZ 77,F
007F:  GOTO   07E
0080:  DECFSZ 00,F
0081:  GOTO   075
0082:  RETURN
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... //#include <time.h> 
.................... #include<math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "lcd.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................   
.................... #define LCD_ENABLE_PIN  PIN_B2                                    //// 
.................... #define LCD_RS_PIN      PIN_B3                                    //// 
.................... #define LCD_RW_PIN      PIN_B0                                    //// 
.................... #define LCD_DATA4       PIN_B4                                    //// 
.................... #define LCD_DATA5       PIN_B5                                    //// 
.................... #define LCD_DATA6       PIN_B6                                    //// 
.................... #define LCD_DATA7       PIN_B7   
....................   
....................   
....................   
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00E8:  BSF    06.4
....................    output_float(LCD_DATA5); 
00E9:  BSF    06.5
....................    output_float(LCD_DATA6); 
00EA:  BSF    06.6
....................    output_float(LCD_DATA7); 
00EB:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00EC:  BCF    03.5
00ED:  BSF    06.0
00EE:  BSF    03.5
00EF:  BCF    06.0
....................    delay_cycles(1); 
00F0:  NOP
....................    lcd_output_enable(1); 
00F1:  BCF    03.5
00F2:  BSF    06.2
00F3:  BSF    03.5
00F4:  BCF    06.2
....................    delay_cycles(1); 
00F5:  NOP
....................    high = lcd_read_nibble(); 
00F6:  BCF    03.5
00F7:  CALL   0AF
00F8:  MOVF   78,W
00F9:  MOVWF  6F
....................        
....................    lcd_output_enable(0); 
00FA:  BCF    06.2
00FB:  BSF    03.5
00FC:  BCF    06.2
....................    delay_cycles(1); 
00FD:  NOP
....................    lcd_output_enable(1); 
00FE:  BCF    03.5
00FF:  BSF    06.2
0100:  BSF    03.5
0101:  BCF    06.2
....................    delay_us(1); 
0102:  GOTO   103
....................    low = lcd_read_nibble(); 
0103:  BCF    03.5
0104:  CALL   0AF
0105:  MOVF   78,W
0106:  MOVWF  6E
....................        
....................    lcd_output_enable(0); 
0107:  BCF    06.2
0108:  BSF    03.5
0109:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
010A:  BCF    06.4
....................    output_drive(LCD_DATA5); 
010B:  BCF    06.5
....................    output_drive(LCD_DATA6); 
010C:  BCF    06.6
....................    output_drive(LCD_DATA7); 
010D:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
010E:  BCF    03.5
010F:  SWAPF  6F,W
0110:  MOVWF  77
0111:  MOVLW  F0
0112:  ANDWF  77,F
0113:  MOVF   77,W
0114:  IORWF  6E,W
0115:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00AF:  CLRF   70
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00B0:  BSF    03.5
00B1:  BSF    06.4
00B2:  MOVLW  00
00B3:  BCF    03.5
00B4:  BTFSC  06.4
00B5:  MOVLW  01
00B6:  IORWF  70,F
....................    n |= input(LCD_DATA5) << 1; 
00B7:  BSF    03.5
00B8:  BSF    06.5
00B9:  MOVLW  00
00BA:  BCF    03.5
00BB:  BTFSC  06.5
00BC:  MOVLW  01
00BD:  MOVWF  77
00BE:  BCF    03.0
00BF:  RLF    77,F
00C0:  MOVF   77,W
00C1:  IORWF  70,F
....................    n |= input(LCD_DATA6) << 2; 
00C2:  BSF    03.5
00C3:  BSF    06.6
00C4:  MOVLW  00
00C5:  BCF    03.5
00C6:  BTFSC  06.6
00C7:  MOVLW  01
00C8:  MOVWF  77
00C9:  RLF    77,F
00CA:  RLF    77,F
00CB:  MOVLW  FC
00CC:  ANDWF  77,F
00CD:  MOVF   77,W
00CE:  IORWF  70,F
....................    n |= input(LCD_DATA7) << 3; 
00CF:  BSF    03.5
00D0:  BSF    06.7
00D1:  MOVLW  00
00D2:  BCF    03.5
00D3:  BTFSC  06.7
00D4:  MOVLW  01
00D5:  MOVWF  77
00D6:  RLF    77,F
00D7:  RLF    77,F
00D8:  RLF    77,F
00D9:  MOVLW  F8
00DA:  ANDWF  77,F
00DB:  MOVF   77,W
00DC:  IORWF  70,F
....................     
....................    return(n); 
00DD:  MOVF   70,W
00DE:  MOVWF  78
....................   #else 
00DF:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0083:  BTFSC  6F.0
0084:  GOTO   087
0085:  BCF    06.4
0086:  GOTO   088
0087:  BSF    06.4
0088:  BSF    03.5
0089:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
008A:  BCF    03.5
008B:  BTFSC  6F.1
008C:  GOTO   08F
008D:  BCF    06.5
008E:  GOTO   090
008F:  BSF    06.5
0090:  BSF    03.5
0091:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0092:  BCF    03.5
0093:  BTFSC  6F.2
0094:  GOTO   097
0095:  BCF    06.6
0096:  GOTO   098
0097:  BSF    06.6
0098:  BSF    03.5
0099:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
009A:  BCF    03.5
009B:  BTFSC  6F.3
009C:  GOTO   09F
009D:  BCF    06.7
009E:  GOTO   0A0
009F:  BSF    06.7
00A0:  BSF    03.5
00A1:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00A2:  NOP
....................    lcd_output_enable(1); 
00A3:  BCF    03.5
00A4:  BSF    06.2
00A5:  BSF    03.5
00A6:  BCF    06.2
....................    delay_us(2); 
00A7:  GOTO   0A8
00A8:  GOTO   0A9
....................    lcd_output_enable(0); 
00A9:  BCF    03.5
00AA:  BCF    06.2
00AB:  BSF    03.5
00AC:  BCF    06.2
00AD:  BCF    03.5
00AE:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00E0:  BSF    03.5
00E1:  BCF    06.2
....................    lcd_rs_tris(); 
00E2:  BCF    06.3
....................    lcd_rw_tris(); 
00E3:  BCF    06.0
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00E4:  BCF    03.5
00E5:  BCF    06.3
00E6:  BSF    03.5
00E7:  BCF    06.3
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0116:  MOVF   78,W
0117:  MOVWF  6E
0118:  BTFSS  6E.7
0119:  GOTO   11C
011A:  BSF    03.5
011B:  GOTO   0E8
....................    lcd_output_rs(address); 
011C:  MOVF   6C,F
011D:  BTFSS  03.2
011E:  GOTO   121
011F:  BCF    06.3
0120:  GOTO   122
0121:  BSF    06.3
0122:  BSF    03.5
0123:  BCF    06.3
....................    delay_cycles(1); 
0124:  NOP
....................    lcd_output_rw(0); 
0125:  BCF    03.5
0126:  BCF    06.0
0127:  BSF    03.5
0128:  BCF    06.0
....................    delay_cycles(1); 
0129:  NOP
....................    lcd_output_enable(0); 
012A:  BCF    03.5
012B:  BCF    06.2
012C:  BSF    03.5
012D:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
012E:  BCF    03.5
012F:  SWAPF  6D,W
0130:  MOVWF  6E
0131:  MOVLW  0F
0132:  ANDWF  6E,F
0133:  MOVF   6E,W
0134:  MOVWF  6F
0135:  CALL   083
....................    lcd_send_nibble(n & 0xf); 
0136:  MOVF   6D,W
0137:  ANDLW  0F
0138:  MOVWF  6E
0139:  MOVWF  6F
013A:  CALL   083
013B:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
013C:  MOVLW  28
013D:  MOVWF  64
013E:  MOVLW  0C
013F:  MOVWF  65
0140:  MOVLW  01
0141:  MOVWF  66
0142:  MOVLW  06
0143:  MOVWF  67
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0144:  BCF    06.2
0145:  BSF    03.5
0146:  BCF    06.2
....................    lcd_output_rs(0); 
0147:  BCF    03.5
0148:  BCF    06.3
0149:  BSF    03.5
014A:  BCF    06.3
....................    lcd_output_rw(0); 
014B:  BCF    03.5
014C:  BCF    06.0
014D:  BSF    03.5
014E:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
014F:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0150:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0151:  BCF    06.6
....................    output_drive(LCD_DATA7); 
0152:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0153:  BCF    06.2
....................    lcd_rs_tris(); 
0154:  BCF    06.3
....................    lcd_rw_tris(); 
0155:  BCF    06.0
....................  #endif 
....................      
....................    delay_ms(15); 
0156:  MOVLW  0F
0157:  BCF    03.5
0158:  MOVWF  68
0159:  CALL   06F
....................    for(i=1;i<=3;++i) 
015A:  MOVLW  01
015B:  MOVWF  63
015C:  MOVF   63,W
015D:  SUBLW  03
015E:  BTFSS  03.0
015F:  GOTO   168
....................    { 
....................        lcd_send_nibble(3); 
0160:  MOVLW  03
0161:  MOVWF  6F
0162:  CALL   083
....................        delay_ms(5); 
0163:  MOVLW  05
0164:  MOVWF  68
0165:  CALL   06F
0166:  INCF   63,F
0167:  GOTO   15C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0168:  MOVLW  02
0169:  MOVWF  6F
016A:  CALL   083
....................    delay_ms(5); 
016B:  MOVLW  05
016C:  MOVWF  68
016D:  CALL   06F
....................    for(i=0;i<=3;++i) 
016E:  CLRF   63
016F:  MOVF   63,W
0170:  SUBLW  03
0171:  BTFSS  03.0
0172:  GOTO   17F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0173:  MOVLW  64
0174:  ADDWF  63,W
0175:  MOVWF  04
0176:  BCF    03.7
0177:  MOVF   00,W
0178:  MOVWF  68
0179:  CLRF   6C
017A:  MOVF   68,W
017B:  MOVWF  6D
017C:  CALL   0E0
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
017D:  INCF   63,F
017E:  GOTO   16F
017F:  BCF    0A.3
0180:  BCF    0A.4
0181:  GOTO   3F7 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01DA:  DECFSZ 69,W
01DB:  GOTO   1DD
01DC:  GOTO   1E0
....................       address=LCD_LINE_TWO; 
01DD:  MOVLW  40
01DE:  MOVWF  6A
01DF:  GOTO   1E1
....................    else 
....................       address=0; 
01E0:  CLRF   6A
....................       
....................    address+=x-1; 
01E1:  MOVLW  01
01E2:  SUBWF  68,W
01E3:  ADDWF  6A,F
....................    lcd_send_byte(0,0x80|address); 
01E4:  MOVF   6A,W
01E5:  IORLW  80
01E6:  MOVWF  6B
01E7:  CLRF   6C
01E8:  MOVF   6B,W
01E9:  MOVWF  6D
01EA:  CALL   0E0
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01EB:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01EC:  MOVF   67,W
01ED:  XORLW  07
01EE:  BTFSC  03.2
01EF:  GOTO   1FA
01F0:  XORLW  0B
01F1:  BTFSC  03.2
01F2:  GOTO   1FF
01F3:  XORLW  06
01F4:  BTFSC  03.2
01F5:  GOTO   207
01F6:  XORLW  02
01F7:  BTFSC  03.2
01F8:  GOTO   20D
01F9:  GOTO   212
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01FA:  MOVLW  01
01FB:  MOVWF  68
01FC:  MOVWF  69
01FD:  CALL   1DA
01FE:  GOTO   217
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01FF:  CLRF   6C
0200:  MOVLW  01
0201:  MOVWF  6D
0202:  CALL   0E0
....................                      delay_ms(2); 
0203:  MOVLW  02
0204:  MOVWF  68
0205:  CALL   06F
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0206:  GOTO   217
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0207:  MOVLW  01
0208:  MOVWF  68
0209:  MOVLW  02
020A:  MOVWF  69
020B:  CALL   1DA
020C:  GOTO   217
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
020D:  CLRF   6C
020E:  MOVLW  10
020F:  MOVWF  6D
0210:  CALL   0E0
0211:  GOTO   217
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0212:  MOVLW  01
0213:  MOVWF  6C
0214:  MOVF   67,W
0215:  MOVWF  6D
0216:  CALL   0E0
....................      #endif 
....................    } 
0217:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define RESET_BUTTON    PIN_d0 
.................... #DEFINE n 4 
....................  
....................  
.................... void main() 
*
0398:  MOVF   03,W
0399:  ANDLW  1F
039A:  MOVWF  03
039B:  MOVLW  71
039C:  BSF    03.5
039D:  MOVWF  0F
039E:  CLRF   10
039F:  MOVF   0F,W
03A0:  BSF    03.6
03A1:  BCF    07.3
03A2:  MOVLW  0C
03A3:  BCF    03.6
03A4:  MOVWF  19
03A5:  MOVLW  A2
03A6:  MOVWF  18
03A7:  MOVLW  90
03A8:  BCF    03.5
03A9:  MOVWF  18
03AA:  CLRF   21
03AB:  CLRF   20
03AC:  BSF    03.5
03AD:  BSF    03.6
03AE:  MOVF   09,W
03AF:  ANDLW  C0
03B0:  MOVWF  09
03B1:  BCF    03.6
03B2:  BCF    1F.4
03B3:  BCF    1F.5
03B4:  MOVLW  00
03B5:  BSF    03.6
03B6:  MOVWF  08
03B7:  BCF    03.5
03B8:  CLRF   07
03B9:  CLRF   08
03BA:  CLRF   09
03BB:  BCF    03.7
*
03F1:  MOVLW  D3
03F2:  MOVWF  4C
03F3:  MOVLW  01
03F4:  MOVWF  4D
03F5:  CLRF   4E
.................... {   
....................    int primeNum[10] = {1091,1427,1753,1571,1291,2671,701,373,661,281}; 
*
03BC:  MOVLW  43
03BD:  BCF    03.6
03BE:  MOVWF  22
03BF:  MOVLW  93
03C0:  MOVWF  23
03C1:  MOVLW  D9
03C2:  MOVWF  24
03C3:  MOVLW  23
03C4:  MOVWF  25
03C5:  MOVLW  0B
03C6:  MOVWF  26
03C7:  MOVLW  6F
03C8:  MOVWF  27
03C9:  MOVLW  BD
03CA:  MOVWF  28
03CB:  MOVLW  75
03CC:  MOVWF  29
03CD:  MOVLW  95
03CE:  MOVWF  2A
03CF:  MOVLW  19
03D0:  MOVWF  2B
....................    int board[n][n] = {0}; 
03D1:  CLRF   2C
03D2:  CLRF   2D
03D3:  CLRF   2E
03D4:  CLRF   2F
03D5:  CLRF   30
03D6:  CLRF   31
03D7:  CLRF   32
03D8:  CLRF   33
03D9:  CLRF   34
03DA:  CLRF   35
03DB:  CLRF   36
03DC:  CLRF   37
03DD:  CLRF   38
03DE:  CLRF   39
03DF:  CLRF   3A
03E0:  CLRF   3B
....................    int freePos[n*n]={0}; 
03E1:  CLRF   3C
03E2:  CLRF   3D
03E3:  CLRF   3E
03E4:  CLRF   3F
03E5:  CLRF   40
03E6:  CLRF   41
03E7:  CLRF   42
03E8:  CLRF   43
03E9:  CLRF   44
03EA:  CLRF   45
03EB:  CLRF   46
03EC:  CLRF   47
03ED:  CLRF   48
03EE:  CLRF   49
03EF:  CLRF   4A
03F0:  CLRF   4B
....................    int gen1 = 211, gen2 = 257; 
....................    int score = 0; 
....................    char keyInput;//get input. 
....................    int randPos;//random number position to fill a new item(number 2) in board. 
....................    int newPos; 
....................    int value; 
....................    boolean canMove; 
....................     
....................    lcd_init(); 
*
03F6:  GOTO   13C
....................    delay_ms(6); 
03F7:  MOVLW  06
03F8:  MOVWF  68
03F9:  CALL   06F
....................     
....................    printf ("\t\t< Welcome to 2048 game >\r\n"); 
03FA:  MOVLW  04
03FB:  BSF    03.6
03FC:  MOVWF  0D
03FD:  MOVLW  00
03FE:  MOVWF  0F
03FF:  BCF    03.6
0400:  CALL   182
....................    printf ("'a' = Left  'd' = Right  'w' = Up  's' = Down\r\n\n"); 
0401:  MOVLW  13
0402:  BSF    03.6
0403:  MOVWF  0D
0404:  MOVLW  00
0405:  MOVWF  0F
0406:  BCF    03.6
0407:  CALL   182
....................     
....................    while(TRUE) { 
....................       printf(lcd_putc,"\fYour score\n%u", score); 
0408:  MOVLW  2C
0409:  BSF    03.6
040A:  MOVWF  0D
040B:  MOVLW  00
040C:  MOVWF  0F
040D:  BCF    03.0
040E:  MOVLW  0C
040F:  BCF    03.6
0410:  MOVWF  63
0411:  GOTO   218
0412:  MOVF   4E,W
0413:  MOVWF  63
0414:  MOVLW  1B
0415:  MOVWF  64
0416:  GOTO   286
....................       delay_ms(1); 
0417:  MOVLW  01
0418:  MOVWF  68
0419:  CALL   06F
....................        
....................       //---------------------------game over check-----------------------------------------// 
....................       boolean canMove = false; 
....................       int count = 0; 
041A:  BCF    53.1
041B:  CLRF   54
....................       for(int i=0;i<n;i++){ 
041C:  CLRF   55
041D:  MOVF   55,W
041E:  SUBLW  03
041F:  BTFSS  03.0
0420:  GOTO   4FB
....................          for(int j=0;j<n;j++){ 
0421:  CLRF   56
0422:  MOVF   56,W
0423:  SUBLW  03
0424:  BTFSS  03.0
0425:  GOTO   4F9
....................             if(board[i][j] == 0){ 
0426:  RLF    55,W
0427:  MOVWF  77
0428:  RLF    77,F
0429:  MOVLW  FC
042A:  ANDWF  77,F
042B:  MOVF   77,W
042C:  ADDWF  56,W
042D:  ADDLW  2C
042E:  MOVWF  04
042F:  BCF    03.7
0430:  MOVF   00,F
0431:  BTFSS  03.2
0432:  GOTO   441
....................                freePos[count++] = (i * n) + j; 
0433:  MOVF   54,W
0434:  INCF   54,F
0435:  ADDLW  3C
0436:  MOVWF  04
0437:  BCF    03.7
0438:  RLF    55,W
0439:  MOVWF  77
043A:  RLF    77,F
043B:  MOVLW  FC
043C:  ANDWF  77,F
043D:  MOVF   77,W
043E:  ADDWF  56,W
043F:  MOVWF  00
....................                canMove = true; 
0440:  BSF    53.1
....................             } 
....................             if((i != 0 && (board[i-1][j] == 0 || board[i-1][j] == board[i][j])) || 
....................                (i != n-1 && (board[i+1][j] == 0 || board[i+1][j] == board[i][j])) || 
....................                (j != 0 && (board[i][j-1] == 0 || board[i][j-1] == board[i][j])) || 
....................                (j != n-1 && (board[i][j+1] == 0 || board[i][j+1] == board[i][j]))) canMove = true; 
0441:  MOVF   55,F
0442:  BTFSC  03.2
0443:  GOTO   46F
0444:  MOVLW  01
0445:  SUBWF  55,W
0446:  MOVWF  77
0447:  RLF    77,F
0448:  RLF    77,F
0449:  MOVLW  FC
044A:  ANDWF  77,F
044B:  MOVF   77,W
044C:  ADDWF  56,W
044D:  ADDLW  2C
044E:  MOVWF  04
044F:  BCF    03.7
0450:  MOVF   00,F
0451:  BTFSC  03.2
0452:  GOTO   4F6
0453:  MOVLW  01
0454:  SUBWF  55,W
0455:  MOVWF  77
0456:  RLF    77,F
0457:  RLF    77,F
0458:  MOVLW  FC
0459:  ANDWF  77,F
045A:  MOVF   77,W
045B:  ADDWF  56,W
045C:  ADDLW  2C
045D:  MOVWF  04
045E:  BCF    03.7
045F:  MOVF   00,W
0460:  MOVWF  63
0461:  RLF    55,W
0462:  MOVWF  77
0463:  RLF    77,F
0464:  MOVLW  FC
0465:  ANDWF  77,F
0466:  MOVF   77,W
0467:  ADDWF  56,W
0468:  ADDLW  2C
0469:  MOVWF  04
046A:  BCF    03.7
046B:  MOVF   00,W
046C:  SUBWF  63,W
046D:  BTFSC  03.2
046E:  GOTO   4F6
046F:  MOVF   55,W
0470:  SUBLW  03
0471:  BTFSC  03.2
0472:  GOTO   49E
0473:  MOVLW  01
0474:  ADDWF  55,W
0475:  MOVWF  77
0476:  RLF    77,F
0477:  RLF    77,F
0478:  MOVLW  FC
0479:  ANDWF  77,F
047A:  MOVF   77,W
047B:  ADDWF  56,W
047C:  ADDLW  2C
047D:  MOVWF  04
047E:  BCF    03.7
047F:  MOVF   00,F
0480:  BTFSC  03.2
0481:  GOTO   4F6
0482:  MOVLW  01
0483:  ADDWF  55,W
0484:  MOVWF  77
0485:  RLF    77,F
0486:  RLF    77,F
0487:  MOVLW  FC
0488:  ANDWF  77,F
0489:  MOVF   77,W
048A:  ADDWF  56,W
048B:  ADDLW  2C
048C:  MOVWF  04
048D:  BCF    03.7
048E:  MOVF   00,W
048F:  MOVWF  63
0490:  RLF    55,W
0491:  MOVWF  77
0492:  RLF    77,F
0493:  MOVLW  FC
0494:  ANDWF  77,F
0495:  MOVF   77,W
0496:  ADDWF  56,W
0497:  ADDLW  2C
0498:  MOVWF  04
0499:  BCF    03.7
049A:  MOVF   00,W
049B:  SUBWF  63,W
049C:  BTFSC  03.2
049D:  GOTO   4F6
049E:  MOVF   56,F
049F:  BTFSC  03.2
04A0:  GOTO   4CA
04A1:  RLF    55,W
04A2:  MOVWF  63
04A3:  RLF    63,F
04A4:  MOVLW  FC
04A5:  ANDWF  63,F
04A6:  MOVLW  01
04A7:  SUBWF  56,W
04A8:  ADDWF  63,W
04A9:  ADDLW  2C
04AA:  MOVWF  04
04AB:  BCF    03.7
04AC:  MOVF   00,F
04AD:  BTFSC  03.2
04AE:  GOTO   4F6
04AF:  RLF    55,W
04B0:  MOVWF  63
04B1:  RLF    63,F
04B2:  MOVLW  FC
04B3:  ANDWF  63,F
04B4:  MOVLW  01
04B5:  SUBWF  56,W
04B6:  ADDWF  63,W
04B7:  ADDLW  2C
04B8:  MOVWF  04
04B9:  BCF    03.7
04BA:  MOVF   00,W
04BB:  MOVWF  63
04BC:  RLF    55,W
04BD:  MOVWF  77
04BE:  RLF    77,F
04BF:  MOVLW  FC
04C0:  ANDWF  77,F
04C1:  MOVF   77,W
04C2:  ADDWF  56,W
04C3:  ADDLW  2C
04C4:  MOVWF  04
04C5:  BCF    03.7
04C6:  MOVF   00,W
04C7:  SUBWF  63,W
04C8:  BTFSC  03.2
04C9:  GOTO   4F6
04CA:  MOVF   56,W
04CB:  SUBLW  03
04CC:  BTFSC  03.2
04CD:  GOTO   4F7
04CE:  RLF    55,W
04CF:  MOVWF  63
04D0:  RLF    63,F
04D1:  MOVLW  FC
04D2:  ANDWF  63,F
04D3:  MOVLW  01
04D4:  ADDWF  56,W
04D5:  ADDWF  63,W
04D6:  ADDLW  2C
04D7:  MOVWF  04
04D8:  BCF    03.7
04D9:  MOVF   00,F
04DA:  BTFSC  03.2
04DB:  GOTO   4F6
04DC:  RLF    55,W
04DD:  MOVWF  63
04DE:  RLF    63,F
04DF:  MOVLW  FC
04E0:  ANDWF  63,F
04E1:  MOVLW  01
04E2:  ADDWF  56,W
04E3:  ADDWF  63,W
04E4:  ADDLW  2C
04E5:  MOVWF  04
04E6:  BCF    03.7
04E7:  MOVF   00,W
04E8:  MOVWF  63
04E9:  RLF    55,W
04EA:  MOVWF  77
04EB:  RLF    77,F
04EC:  MOVLW  FC
04ED:  ANDWF  77,F
04EE:  MOVF   77,W
04EF:  ADDWF  56,W
04F0:  ADDLW  2C
04F1:  MOVWF  04
04F2:  BCF    03.7
04F3:  MOVF   00,W
04F4:  SUBWF  63,W
04F5:  BTFSC  03.2
04F6:  BSF    53.1
04F7:  INCF   56,F
04F8:  GOTO   422
....................          } 
04F9:  INCF   55,F
04FA:  GOTO   41D
....................       } 
....................       if(!canMove) { 
04FB:  BTFSC  53.1
04FC:  GOTO   505
....................          printf("\t\t\t!Game Over!\r\n"); 
04FD:  MOVLW  34
04FE:  BSF    03.6
04FF:  MOVWF  0D
0500:  MOVLW  00
0501:  MOVWF  0F
0502:  BCF    03.6
0503:  CALL   182
....................          break; 
0504:  GOTO   7C1
....................       } 
....................        //---------------------------game over check-----------------------------------------// 
....................        
....................       //---------------------------random Generator-----------------------------------------// 
....................       randPos = 0; 
0505:  CLRF   50
....................       if(gen2 == 0) gen2 = primeNum[count%10]; 
0506:  MOVF   4D,F
0507:  BTFSS  03.2
0508:  GOTO   514
0509:  MOVF   54,W
050A:  MOVWF  6B
050B:  MOVLW  0A
050C:  MOVWF  6C
050D:  CALL   271
050E:  MOVLW  22
050F:  ADDWF  77,W
0510:  MOVWF  04
0511:  BCF    03.7
0512:  MOVF   00,W
0513:  MOVWF  4D
....................       for(int i=0;i<count;i++){ 
0514:  CLRF   57
0515:  MOVF   54,W
0516:  SUBWF  57,W
0517:  BTFSC  03.0
0518:  GOTO   533
....................          randPos += (freePos[i]*freePos[i])%43; 
0519:  MOVLW  3C
051A:  ADDWF  57,W
051B:  MOVWF  04
051C:  BCF    03.7
051D:  MOVF   00,W
051E:  MOVWF  63
051F:  MOVLW  3C
0520:  ADDWF  57,W
0521:  MOVWF  04
0522:  BCF    03.7
0523:  MOVF   00,W
0524:  MOVWF  64
0525:  MOVF   63,W
0526:  MOVWF  65
0527:  MOVF   64,W
0528:  MOVWF  66
0529:  CALL   2BD
052A:  MOVF   78,W
052B:  MOVWF  6B
052C:  MOVLW  2B
052D:  MOVWF  6C
052E:  CALL   271
052F:  MOVF   77,W
0530:  ADDWF  50,F
0531:  INCF   57,F
0532:  GOTO   515
....................       } 
....................       randPos = abs((int)((gen1%41) * randPos))%count; 
0533:  MOVF   4C,W
0534:  MOVWF  6B
0535:  MOVLW  29
0536:  MOVWF  6C
0537:  CALL   271
0538:  MOVF   77,W
0539:  MOVWF  65
053A:  MOVF   50,W
053B:  MOVWF  66
053C:  CALL   2BD
053D:  MOVF   78,W
053E:  MOVWF  63
053F:  MOVF   78,W
0540:  MOVWF  6B
0541:  MOVF   54,W
0542:  MOVWF  6C
0543:  CALL   271
0544:  MOVF   77,W
0545:  MOVWF  50
....................       int gen1Tmp = gen1; 
0546:  MOVF   4C,W
0547:  MOVWF  58
....................       gen1 = gen2; 
0548:  MOVF   4D,W
0549:  MOVWF  4C
....................       gen2 = (int)(gen2 * gen1Tmp * randPos + 1427); 
054A:  MOVF   4D,W
054B:  MOVWF  65
054C:  MOVF   58,W
054D:  MOVWF  66
054E:  CALL   2BD
054F:  MOVF   78,W
0550:  MOVWF  65
0551:  MOVF   50,W
0552:  MOVWF  66
0553:  CALL   2BD
0554:  MOVLW  93
0555:  ADDWF  78,W
0556:  MOVWF  78
0557:  MOVLW  05
0558:  MOVWF  7A
0559:  BTFSC  03.0
055A:  INCF   7A,F
055B:  MOVF   78,W
055C:  MOVWF  4D
....................        
....................       board[freePos[randPos]/n][freePos[randPos]%n] = 2; //fill a new item(number 2) in board. 
055D:  MOVLW  3C
055E:  ADDWF  50,W
055F:  MOVWF  04
0560:  BCF    03.7
0561:  RRF    00,W
0562:  MOVWF  77
0563:  RRF    77,F
0564:  MOVLW  3F
0565:  ANDWF  77,F
0566:  MOVF   77,W
0567:  RLF    77,W
0568:  MOVWF  63
0569:  RLF    63,F
056A:  MOVLW  FC
056B:  ANDWF  63,F
056C:  MOVLW  3C
056D:  ADDWF  50,W
056E:  MOVWF  04
056F:  BCF    03.7
0570:  MOVF   00,W
0571:  ANDLW  03
0572:  ADDWF  63,W
0573:  ADDLW  2C
0574:  MOVWF  04
0575:  BCF    03.7
0576:  MOVLW  02
0577:  MOVWF  00
....................       //---------------------------random Generator-----------------------------------------// 
....................        
....................       //---------------------------show Board-----------------------------------------// 
....................       for(int i=0;i<n;i++){ 
0578:  CLRF   59
0579:  MOVF   59,W
057A:  SUBLW  03
057B:  BTFSS  03.0
057C:  GOTO   5A7
....................          printf("\t"); 
057D:  MOVLW  09
057E:  BTFSS  0C.4
057F:  GOTO   57E
0580:  MOVWF  19
....................          for(int j=0;j<n;j++){ 
0581:  CLRF   5A
0582:  MOVF   5A,W
0583:  SUBLW  03
0584:  BTFSS  03.0
0585:  GOTO   59D
....................             printf("\t%d", board[i][j]); 
0586:  RLF    59,W
0587:  MOVWF  77
0588:  RLF    77,F
0589:  MOVLW  FC
058A:  ANDWF  77,F
058B:  MOVF   77,W
058C:  ADDWF  5A,W
058D:  ADDLW  2C
058E:  MOVWF  04
058F:  BCF    03.7
0590:  MOVF   00,W
0591:  MOVWF  63
0592:  MOVLW  09
0593:  BTFSS  0C.4
0594:  GOTO   593
0595:  MOVWF  19
0596:  MOVF   63,W
0597:  MOVWF  65
0598:  MOVLW  18
0599:  MOVWF  66
059A:  CALL   2E2
059B:  INCF   5A,F
059C:  GOTO   582
....................          } 
....................          printf("\r\n"); 
059D:  MOVLW  0D
059E:  BTFSS  0C.4
059F:  GOTO   59E
05A0:  MOVWF  19
05A1:  MOVLW  0A
05A2:  BTFSS  0C.4
05A3:  GOTO   5A2
05A4:  MOVWF  19
05A5:  INCF   59,F
05A6:  GOTO   579
....................       } 
....................       printf("\t\tadd new [2] in (%d,%d)\r\n",freePos[randPos]/n,freePos[randPos]%n); 
05A7:  MOVLW  3C
05A8:  ADDWF  50,W
05A9:  MOVWF  04
05AA:  BCF    03.7
05AB:  RRF    00,W
05AC:  MOVWF  63
05AD:  RRF    63,F
05AE:  MOVLW  3F
05AF:  ANDWF  63,F
05B0:  MOVLW  3C
05B1:  ADDWF  50,W
05B2:  MOVWF  04
05B3:  BCF    03.7
05B4:  MOVF   00,W
05B5:  ANDLW  03
05B6:  MOVWF  64
05B7:  MOVLW  3D
05B8:  BSF    03.6
05B9:  MOVWF  0D
05BA:  MOVLW  00
05BB:  MOVWF  0F
05BC:  BCF    03.0
05BD:  MOVLW  12
05BE:  BCF    03.6
05BF:  MOVWF  65
05C0:  GOTO   33D
05C1:  MOVF   63,W
05C2:  MOVWF  65
05C3:  MOVLW  18
05C4:  MOVWF  66
05C5:  CALL   2E2
05C6:  MOVLW  2C
05C7:  BTFSS  0C.4
05C8:  GOTO   5C7
05C9:  MOVWF  19
05CA:  MOVF   64,W
05CB:  MOVWF  65
05CC:  MOVLW  18
05CD:  MOVWF  66
05CE:  CALL   2E2
05CF:  MOVLW  29
05D0:  BTFSS  0C.4
05D1:  GOTO   5D0
05D2:  MOVWF  19
05D3:  MOVLW  0D
05D4:  BTFSS  0C.4
05D5:  GOTO   5D4
05D6:  MOVWF  19
05D7:  MOVLW  0A
05D8:  BTFSS  0C.4
05D9:  GOTO   5D8
05DA:  MOVWF  19
....................       printf("\r\n"); 
05DB:  MOVLW  0D
05DC:  BTFSS  0C.4
05DD:  GOTO   5DC
05DE:  MOVWF  19
05DF:  MOVLW  0A
05E0:  BTFSS  0C.4
05E1:  GOTO   5E0
05E2:  MOVWF  19
....................       printf("\r\n"); 
05E3:  MOVLW  0D
05E4:  BTFSS  0C.4
05E5:  GOTO   5E4
05E6:  MOVWF  19
05E7:  MOVLW  0A
05E8:  BTFSS  0C.4
05E9:  GOTO   5E8
05EA:  MOVWF  19
....................       //---------------------------show Board-----------------------------------------// 
....................        
....................       //---------------------------get input and move-----------------------------------------// 
....................       keyInput = getc(); 
05EB:  BTFSS  0C.5
05EC:  GOTO   5EB
05ED:  MOVF   1A,W
05EE:  MOVWF  4F
....................       switch(keyInput){ 
05EF:  MOVF   4F,W
05F0:  XORLW  61
05F1:  BTFSC  03.2
05F2:  GOTO   5FD
05F3:  XORLW  05
05F4:  BTFSC  03.2
05F5:  GOTO   66A
05F6:  XORLW  13
05F7:  BTFSC  03.2
05F8:  GOTO   6DC
05F9:  XORLW  04
05FA:  BTFSC  03.2
05FB:  GOTO   74B
05FC:  GOTO   7C0
....................          case 'a': //move items to the left if can. 
....................             printf("\t\t\t----Left----\r\n"); 
05FD:  MOVLW  4B
05FE:  BSF    03.6
05FF:  MOVWF  0D
0600:  MOVLW  00
0601:  MOVWF  0F
0602:  BCF    03.6
0603:  CALL   182
....................             for(int i=0;i<n;i++){ 
0604:  CLRF   5B
0605:  MOVF   5B,W
0606:  SUBLW  03
0607:  BTFSS  03.0
0608:  GOTO   669
....................                for(int j=1;j<n;j++){ 
0609:  MOVLW  01
060A:  MOVWF  5C
060B:  MOVF   5C,W
060C:  SUBLW  03
060D:  BTFSS  03.0
060E:  GOTO   667
....................                   newPos = j; 
060F:  MOVF   5C,W
0610:  MOVWF  51
....................                   value = board[i][j]; 
0611:  RLF    5B,W
0612:  MOVWF  77
0613:  RLF    77,F
0614:  MOVLW  FC
0615:  ANDWF  77,F
0616:  MOVF   77,W
0617:  ADDWF  5C,W
0618:  ADDLW  2C
0619:  MOVWF  04
061A:  BCF    03.7
061B:  MOVF   00,W
061C:  MOVWF  52
....................                   while(newPos > 0){ 
061D:  MOVF   51,F
061E:  BTFSC  03.2
061F:  GOTO   644
....................                      if(board[i][newPos-1] == 0) newPos--; //move when position in left hand empty. 
0620:  RLF    5B,W
0621:  MOVWF  63
0622:  RLF    63,F
0623:  MOVLW  FC
0624:  ANDWF  63,F
0625:  MOVLW  01
0626:  SUBWF  51,W
0627:  ADDWF  63,W
0628:  ADDLW  2C
0629:  MOVWF  04
062A:  BCF    03.7
062B:  MOVF   00,F
062C:  BTFSS  03.2
062D:  GOTO   630
062E:  DECF   51,F
062F:  GOTO   643
....................                      else{ 
....................                         if(board[i][newPos-1] == value){ //move when value can sum with same number. 
0630:  RLF    5B,W
0631:  MOVWF  63
0632:  RLF    63,F
0633:  MOVLW  FC
0634:  ANDWF  63,F
0635:  MOVLW  01
0636:  SUBWF  51,W
0637:  ADDWF  63,W
0638:  ADDLW  2C
0639:  MOVWF  04
063A:  BCF    03.7
063B:  MOVF   52,W
063C:  SUBWF  00,W
063D:  BTFSS  03.2
063E:  GOTO   642
....................                            value*=2;  
063F:  BCF    03.0
0640:  RLF    52,F
....................                            newPos--; 
0641:  DECF   51,F
....................                         } 
....................                         break;//end while loop. 
0642:  GOTO   644
....................                      } 
0643:  GOTO   61D
....................                   } 
....................                   if(newPos!=j){ 
0644:  MOVF   5C,W
0645:  SUBWF  51,W
0646:  BTFSC  03.2
0647:  GOTO   665
....................                      if(value > 2) score += value; 
0648:  MOVF   52,W
0649:  SUBLW  02
064A:  BTFSC  03.0
064B:  GOTO   64E
064C:  MOVF   52,W
064D:  ADDWF  4E,F
....................                      board[i][newPos] = value; 
064E:  RLF    5B,W
064F:  MOVWF  77
0650:  RLF    77,F
0651:  MOVLW  FC
0652:  ANDWF  77,F
0653:  MOVF   77,W
0654:  ADDWF  51,W
0655:  ADDLW  2C
0656:  MOVWF  04
0657:  BCF    03.7
0658:  MOVF   52,W
0659:  MOVWF  00
....................                      board[i][j] = 0; 
065A:  RLF    5B,W
065B:  MOVWF  77
065C:  RLF    77,F
065D:  MOVLW  FC
065E:  ANDWF  77,F
065F:  MOVF   77,W
0660:  ADDWF  5C,W
0661:  ADDLW  2C
0662:  MOVWF  04
0663:  BCF    03.7
0664:  CLRF   00
....................                   } 
0665:  INCF   5C,F
0666:  GOTO   60B
....................                } 
0667:  INCF   5B,F
0668:  GOTO   605
....................             } 
....................              
....................             break; 
0669:  GOTO   7C0
....................          case 'd': //move items to the right if can. 
....................             printf("\t\t\t---Right---\r\n"); 
066A:  MOVLW  54
066B:  BSF    03.6
066C:  MOVWF  0D
066D:  MOVLW  00
066E:  MOVWF  0F
066F:  BCF    03.6
0670:  CALL   182
....................             for(int i=0;i<n;i++){ 
0671:  CLRF   5D
0672:  MOVF   5D,W
0673:  SUBLW  03
0674:  BTFSS  03.0
0675:  GOTO   6DB
....................                for(int j=1;j<n;j++){ 
0676:  MOVLW  01
0677:  MOVWF  5E
0678:  MOVF   5E,W
0679:  SUBLW  03
067A:  BTFSS  03.0
067B:  GOTO   6D9
....................                   newPos = n-1-j; 
067C:  MOVF   5E,W
067D:  SUBLW  03
067E:  MOVWF  51
....................                   value = board[i][n-1-j]; 
067F:  RLF    5D,W
0680:  MOVWF  63
0681:  RLF    63,F
0682:  MOVLW  FC
0683:  ANDWF  63,F
0684:  MOVF   5E,W
0685:  SUBLW  03
0686:  ADDWF  63,W
0687:  ADDLW  2C
0688:  MOVWF  04
0689:  BCF    03.7
068A:  MOVF   00,W
068B:  MOVWF  52
....................                   while(newPos < n-1){ 
068C:  MOVF   51,W
068D:  SUBLW  02
068E:  BTFSS  03.0
068F:  GOTO   6B4
....................                      if(board[i][newPos+1] == 0) newPos++; //move when position in right hand empty. 
0690:  RLF    5D,W
0691:  MOVWF  63
0692:  RLF    63,F
0693:  MOVLW  FC
0694:  ANDWF  63,F
0695:  MOVLW  01
0696:  ADDWF  51,W
0697:  ADDWF  63,W
0698:  ADDLW  2C
0699:  MOVWF  04
069A:  BCF    03.7
069B:  MOVF   00,F
069C:  BTFSS  03.2
069D:  GOTO   6A0
069E:  INCF   51,F
069F:  GOTO   6B3
....................                      else{ 
....................                         if(board[i][newPos+1] == value){ //move when value can sum with same number. 
06A0:  RLF    5D,W
06A1:  MOVWF  63
06A2:  RLF    63,F
06A3:  MOVLW  FC
06A4:  ANDWF  63,F
06A5:  MOVLW  01
06A6:  ADDWF  51,W
06A7:  ADDWF  63,W
06A8:  ADDLW  2C
06A9:  MOVWF  04
06AA:  BCF    03.7
06AB:  MOVF   52,W
06AC:  SUBWF  00,W
06AD:  BTFSS  03.2
06AE:  GOTO   6B2
....................                            value*=2;  
06AF:  BCF    03.0
06B0:  RLF    52,F
....................                            newPos++; 
06B1:  INCF   51,F
....................                         } 
....................                         break;//end while loop. 
06B2:  GOTO   6B4
....................                      } 
06B3:  GOTO   68C
....................                   } 
....................                   if(newPos!=n-1-j){ 
06B4:  MOVF   5E,W
06B5:  SUBLW  03
06B6:  SUBWF  51,W
06B7:  BTFSC  03.2
06B8:  GOTO   6D7
....................                      if(value > 2) score += value; 
06B9:  MOVF   52,W
06BA:  SUBLW  02
06BB:  BTFSC  03.0
06BC:  GOTO   6BF
06BD:  MOVF   52,W
06BE:  ADDWF  4E,F
....................                      board[i][newPos] = value; 
06BF:  RLF    5D,W
06C0:  MOVWF  77
06C1:  RLF    77,F
06C2:  MOVLW  FC
06C3:  ANDWF  77,F
06C4:  MOVF   77,W
06C5:  ADDWF  51,W
06C6:  ADDLW  2C
06C7:  MOVWF  04
06C8:  BCF    03.7
06C9:  MOVF   52,W
06CA:  MOVWF  00
....................                      board[i][n-1-j] = 0; 
06CB:  RLF    5D,W
06CC:  MOVWF  63
06CD:  RLF    63,F
06CE:  MOVLW  FC
06CF:  ANDWF  63,F
06D0:  MOVF   5E,W
06D1:  SUBLW  03
06D2:  ADDWF  63,W
06D3:  ADDLW  2C
06D4:  MOVWF  04
06D5:  BCF    03.7
06D6:  CLRF   00
....................                   } 
06D7:  INCF   5E,F
06D8:  GOTO   678
....................                } 
06D9:  INCF   5D,F
06DA:  GOTO   672
....................             } 
....................             break; 
06DB:  GOTO   7C0
....................          case 'w': //move items to the top if can. 
....................             printf("\t\t\t----Top----\r\n"); 
06DC:  MOVLW  5D
06DD:  BSF    03.6
06DE:  MOVWF  0D
06DF:  MOVLW  00
06E0:  MOVWF  0F
06E1:  BCF    03.6
06E2:  CALL   182
....................             for(int i=0;i<n;i++){ 
06E3:  CLRF   5F
06E4:  MOVF   5F,W
06E5:  SUBLW  03
06E6:  BTFSS  03.0
06E7:  GOTO   74A
....................                for(int j=1;j<n;j++){ 
06E8:  MOVLW  01
06E9:  MOVWF  60
06EA:  MOVF   60,W
06EB:  SUBLW  03
06EC:  BTFSS  03.0
06ED:  GOTO   748
....................                   newPos = j; 
06EE:  MOVF   60,W
06EF:  MOVWF  51
....................                   value = board[j][i]; 
06F0:  RLF    60,W
06F1:  MOVWF  77
06F2:  RLF    77,F
06F3:  MOVLW  FC
06F4:  ANDWF  77,F
06F5:  MOVF   77,W
06F6:  ADDWF  5F,W
06F7:  ADDLW  2C
06F8:  MOVWF  04
06F9:  BCF    03.7
06FA:  MOVF   00,W
06FB:  MOVWF  52
....................                   while(newPos > 0){ 
06FC:  MOVF   51,F
06FD:  BTFSC  03.2
06FE:  GOTO   725
....................                      if(board[newPos-1][i] == 0) newPos--; //move when position in top hand empty. 
06FF:  MOVLW  01
0700:  SUBWF  51,W
0701:  MOVWF  77
0702:  RLF    77,F
0703:  RLF    77,F
0704:  MOVLW  FC
0705:  ANDWF  77,F
0706:  MOVF   77,W
0707:  ADDWF  5F,W
0708:  ADDLW  2C
0709:  MOVWF  04
070A:  BCF    03.7
070B:  MOVF   00,F
070C:  BTFSS  03.2
070D:  GOTO   710
070E:  DECF   51,F
070F:  GOTO   724
....................                      else{ 
....................                         if(board[newPos-1][i] == value){ //move when value can sum with same number. 
0710:  MOVLW  01
0711:  SUBWF  51,W
0712:  MOVWF  77
0713:  RLF    77,F
0714:  RLF    77,F
0715:  MOVLW  FC
0716:  ANDWF  77,F
0717:  MOVF   77,W
0718:  ADDWF  5F,W
0719:  ADDLW  2C
071A:  MOVWF  04
071B:  BCF    03.7
071C:  MOVF   52,W
071D:  SUBWF  00,W
071E:  BTFSS  03.2
071F:  GOTO   723
....................                            value*=2;  
0720:  BCF    03.0
0721:  RLF    52,F
....................                            newPos--; 
0722:  DECF   51,F
....................                         } 
....................                         break;//end while loop. 
0723:  GOTO   725
....................                      } 
0724:  GOTO   6FC
....................                   } 
....................                   if(newPos!=j){ 
0725:  MOVF   60,W
0726:  SUBWF  51,W
0727:  BTFSC  03.2
0728:  GOTO   746
....................                      if(value > 2) score += value; 
0729:  MOVF   52,W
072A:  SUBLW  02
072B:  BTFSC  03.0
072C:  GOTO   72F
072D:  MOVF   52,W
072E:  ADDWF  4E,F
....................                      board[newPos][i] = value; 
072F:  RLF    51,W
0730:  MOVWF  77
0731:  RLF    77,F
0732:  MOVLW  FC
0733:  ANDWF  77,F
0734:  MOVF   77,W
0735:  ADDWF  5F,W
0736:  ADDLW  2C
0737:  MOVWF  04
0738:  BCF    03.7
0739:  MOVF   52,W
073A:  MOVWF  00
....................                      board[j][i] = 0; 
073B:  RLF    60,W
073C:  MOVWF  77
073D:  RLF    77,F
073E:  MOVLW  FC
073F:  ANDWF  77,F
0740:  MOVF   77,W
0741:  ADDWF  5F,W
0742:  ADDLW  2C
0743:  MOVWF  04
0744:  BCF    03.7
0745:  CLRF   00
....................                   } 
0746:  INCF   60,F
0747:  GOTO   6EA
....................                } 
0748:  INCF   5F,F
0749:  GOTO   6E4
....................             } 
....................             break; 
074A:  GOTO   7C0
....................          case 's': //move items to the bottom if can. 
....................             printf("\t\t\t---Bottom---\r\n"); 
074B:  MOVLW  66
074C:  BSF    03.6
074D:  MOVWF  0D
074E:  MOVLW  00
074F:  MOVWF  0F
0750:  BCF    03.6
0751:  CALL   182
....................             for(int i=0;i<n;i++){ 
0752:  CLRF   61
0753:  MOVF   61,W
0754:  SUBLW  03
0755:  BTFSS  03.0
0756:  GOTO   7C0
....................                for(int j=1;j<n;j++){ 
0757:  MOVLW  01
0758:  MOVWF  62
0759:  MOVF   62,W
075A:  SUBLW  03
075B:  BTFSS  03.0
075C:  GOTO   7BE
....................                   newPos = n-1-j; 
075D:  MOVF   62,W
075E:  SUBLW  03
075F:  MOVWF  51
....................                   value = board[n-1-j][i]; 
0760:  MOVF   62,W
0761:  SUBLW  03
0762:  MOVWF  77
0763:  RLF    77,F
0764:  RLF    77,F
0765:  MOVLW  FC
0766:  ANDWF  77,F
0767:  MOVF   77,W
0768:  ADDWF  61,W
0769:  ADDLW  2C
076A:  MOVWF  04
076B:  BCF    03.7
076C:  MOVF   00,W
076D:  MOVWF  52
....................                   while(newPos < n-1){ 
076E:  MOVF   51,W
076F:  SUBLW  02
0770:  BTFSS  03.0
0771:  GOTO   798
....................                      if(board[newPos+1][i] == 0) newPos++; //move when position in bottom hand empty. 
0772:  MOVLW  01
0773:  ADDWF  51,W
0774:  MOVWF  77
0775:  RLF    77,F
0776:  RLF    77,F
0777:  MOVLW  FC
0778:  ANDWF  77,F
0779:  MOVF   77,W
077A:  ADDWF  61,W
077B:  ADDLW  2C
077C:  MOVWF  04
077D:  BCF    03.7
077E:  MOVF   00,F
077F:  BTFSS  03.2
0780:  GOTO   783
0781:  INCF   51,F
0782:  GOTO   797
....................                      else{ 
....................                         if(board[newPos+1][i] == value){ //move when value can sum with same number. 
0783:  MOVLW  01
0784:  ADDWF  51,W
0785:  MOVWF  77
0786:  RLF    77,F
0787:  RLF    77,F
0788:  MOVLW  FC
0789:  ANDWF  77,F
078A:  MOVF   77,W
078B:  ADDWF  61,W
078C:  ADDLW  2C
078D:  MOVWF  04
078E:  BCF    03.7
078F:  MOVF   52,W
0790:  SUBWF  00,W
0791:  BTFSS  03.2
0792:  GOTO   796
....................                            value*=2;  
0793:  BCF    03.0
0794:  RLF    52,F
....................                            newPos++; 
0795:  INCF   51,F
....................                         } 
....................                         break;//end while loop. 
0796:  GOTO   798
....................                      } 
0797:  GOTO   76E
....................                   } 
....................                   if(newPos!=n-1-j){ 
0798:  MOVF   62,W
0799:  SUBLW  03
079A:  SUBWF  51,W
079B:  BTFSC  03.2
079C:  GOTO   7BC
....................                      if(value > 2) score += value; 
079D:  MOVF   52,W
079E:  SUBLW  02
079F:  BTFSC  03.0
07A0:  GOTO   7A3
07A1:  MOVF   52,W
07A2:  ADDWF  4E,F
....................                      board[newPos][i] = value; 
07A3:  RLF    51,W
07A4:  MOVWF  77
07A5:  RLF    77,F
07A6:  MOVLW  FC
07A7:  ANDWF  77,F
07A8:  MOVF   77,W
07A9:  ADDWF  61,W
07AA:  ADDLW  2C
07AB:  MOVWF  04
07AC:  BCF    03.7
07AD:  MOVF   52,W
07AE:  MOVWF  00
....................                      board[n-1-j][i] = 0; 
07AF:  MOVF   62,W
07B0:  SUBLW  03
07B1:  MOVWF  77
07B2:  RLF    77,F
07B3:  RLF    77,F
07B4:  MOVLW  FC
07B5:  ANDWF  77,F
07B6:  MOVF   77,W
07B7:  ADDWF  61,W
07B8:  ADDLW  2C
07B9:  MOVWF  04
07BA:  BCF    03.7
07BB:  CLRF   00
....................                   } 
07BC:  INCF   62,F
07BD:  GOTO   759
....................                } 
07BE:  INCF   61,F
07BF:  GOTO   753
....................             } 
....................             break;  
....................          default: 
....................       } 
07C0:  GOTO   408
....................       //---------------------------get input and move-----------------------------------------// 
....................        
....................    } 
....................     
.................... } 
07C1:  SLEEP

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
